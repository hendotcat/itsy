import React from "react"

export default ({
  children,
  layers = [{
    scale: 1,
    width: 0.8,
    x: 0.5,
    y: 0.5,
    color: "black",
  }],
  fontWeight = 0.8,
  groupElement = "g",
  pathElement = "path",
}) => {

  const d = (points, layer) => `M${points.map(p => [
    layer.scale * (p[0] + layer.x),
    layer.scale * (p[1] + layer.y),
  ]).join(" L")}`

  const strokes = points[children] || []

  const groupProps = {
    strokeLinecap: "square",
    strokeLinejoin: "round",
  }

  const groupChildren = layers.map((layer, i) => {
    return strokes.map((stroke, j) => React.createElement(
      pathElement, {
        d: d(stroke, layer),
        key: `${i}-${j}`,
        fill: "none",
        stroke: layer.color,
        strokeWidth: layer.width,
      }
    ))
  })

  const group = React.createElement(
    groupElement,
    groupProps,
    groupChildren
  )

  return group
}

const points = {
  "0": [
    [[0,0], [2,0], [2,4], [0,4], [0,0]],
  ],

  "1": [
    [[0,0], [1,0], [1,4]],
    [[0,4], [2,4]],
  ],

  "2": [
    [[0,0], [2,0], [2,2], [0,2], [0,4], [2,4]],
  ],

  "3": [
    [[0,0], [2,0], [2,1], [1,2], [2,3], [2,4], [0,4]],
  ],

  "4": [
    [[0,0], [0,2], [2,2]],
    [[2,0], [2,4]],
  ],

  "5": [
    [[2,0], [0,0], [0,2], [2,2], [2,4], [0,4]],
  ],

  "6": [
    [[0,0], [0,4], [2,4], [2,2], [0,2]],
  ],

  "7": [
    [[0,0], [2,0], [2,4]],
  ],

  "8": [
    [[0,0], [2,0], [2,1], [1,2], [2,3], [2,4], [0,4], [0,3], [1,2], [0,1], [0,0], [2,0]],
  ],

  "9": [
    [[2,2], [0,2], [0,0], [2,0], [2,4]],
  ],

  "!": [
    [[1,0], [1,2]],
    [[1,4], [1,4]],
  ],

  "@": [
    [[2,4], [1,4], [0,3], [0,1], [1,0], [2,1], [2,2]],
  ],

  '"': [
    [[0,0], [0,1]],
    [[2,0], [2,1]],
  ],

  "$": [
    [[2,0.5], [1,0.5], [0,1.5], [2,2.5], [1,3.5], [0,3.5]],
    [[1,0], [1,4]],
  ],

  "%": [
    [[0,0], [0,0]],
    [[2,4], [2,4]],
    [[0,4], [2,0]],
    //path([2,0], [2,1]),
    //path([1,2], [1,2])
  ],

  "&": [
    [[2,4], [1,3], [1,2], [1,0], [0,0], [0,4], [1,4], [2,3]],
    //path([1,2], [1,0], [0,0], [0,4], [2,4], [2,3]),
  ],

  "'": [
    [[0,1], [1,0]],
  ],

  "(": [
    [[1,0], [0,1], [0,3], [1,4]],
  ],

  ")": [
    [[1,0], [2,1], [2,3], [1,4]],
  ],

  "*": [
    [[1,1], [1,3]],
    [[0,2], [2,2]],
    [[0,1], [2,3]],
    [[2,1], [0,3]],
  ],

  "+": [
    [[1,1], [1,3]],
    [[0,2], [2,2]],
  ],

  "#": [
    [[0,1], [2,1]],
    [[0,3], [2,3]],
    [[0.5,0], [0.5,4]],
    [[1.5,0], [1.5,4]],
  ],

  "-": [
    [[0,2], [2,2]],
  ],

  ",": [
    [[1,3], [0,4]],
  ],

  ".": [
    [[1,4], [1,4]],
  ],

  "/": [
    [[0,4], [2,0]],
  ],

  ":": [
    [[1,1], [1,1]],
    [[1,3], [1,3]],
  ],

  ";": [
    [[1,1], [1,1]],
    [[1,3], [0,4]],
  ],

  "<": [
    [[2,0], [0,2], [2,4]],
  ],

  ">": [
    [[0,0], [2,2], [0,4]],
  ],

  "?": [
    [[0,0], [2,0], [2,2], [1,2]],
    [[1,4], [1,4]],
  ],

  "^": [
    [[0,1], [1,0], [2,1]],
  ],

  "_": [
    [[0,4], [2,4]],
  ],

  "{": [
    [[2,0], [1,0], [1,4], [2,4]],
    [[0,2], [1,2]],
  ],

  "}": [
    [[0,0], [1,0], [1,4], [0,4]],
    [[2,2], [1,2]],
  ],

  "|": [
    [[1,0], [1,4]],
  ],

  "~": [
    [[0,3], [0,2], [2,2], [2,1]],
  ],

  "`": [
    [[1,0], [2,1]],
  ],

  "[": [
    [[1,0], [0,0], [0,4], [1,4]],
  ],

  "]": [
    [[1,0], [2,0], [2,4], [1,4]],
  ],

  "\\": [
    [[0,0], [2,4]],
  ],

  "A": [
    [[0,4], [0,0], [2,0], [2,4]],
    [[0,2], [2,2]],
  ],

  "B": [
    [[1,2], [2,1], [2,0], [0,0], [0,4], [2,4], [2,3], [1,2], [2,1], [2,0]],
  ],

  "C": [
    [[2,0], [1,0], [0,1], [0,3], [1,4], [2,4]],
  ],

  "D": [
    [[1,0], [0,0], [0,4], [1,4], [2,3], [2,1], [1,0], [0,0]],
  ],

  "E": [
    [[2,0], [0,0], [0,4], [2,4]],
    [[0,2], [1,2]],
  ],

  "F": [
    [[2,0], [0,0], [0,4]],
    [[0,2], [1,2]],
  ],

  "G": [
    [[2,0], [1,0], [0,1], [0,4], [2,4], [2,3]],
  ],

  "H": [
    [[0,0], [0,4]],
    [[2,0], [2,4]],
    [[0,2], [2,2]],
  ],

  "I": [
    [[0,0], [2,0]],
    [[0,4], [2,4]],
    [[1,0], [1,4]],
  ],

  "J": [
    [[0,0], [2,0]],
    [[0,4], [1,4], [1,0]],
  ],

  "K": [
    [[0,0], [0,4]],
    [[0,2], [1,2], [2,1], [2,0]],
    [[1,2], [2,3], [2,4]],
  ],

  "L": [
    [[0,0], [0,4], [2,4]],
  ],

  "M": [
    [[0,4], [0,0], [1,1], [2,0], [2,4]],
  ],

  "N": [
    [[0,4], [0,0], [1,0], [2,1], [2,4]],
  ],

  "O": [
    [[0,1], [0,4], [1,4], [2,3], [2,0], [1,0], [0,1], [0,4]],
  ],

  "P": [
    [[0,4], [0,0], [2,0], [2,2], [0,2]],
  ],

  "Q": [
    [[2,4], [1,4], [1,3], [0,3], [0,1], [1,0], [2,1], [2,2], [1,3]],
  ],

  "R": [
    [[0,4], [0,0], [2,0], [2,1], [1,2], [2,3], [2,4]],
  ],

  "S": [
    [[2,0], [1,0], [0,1], [0,2], [2,2], [2,3], [1,4], [0,4]],
  ],

  "T": [
    [[0,0], [2,0]],
    [[1,0], [1,4]],
  ],

  "U": [
    [[0,0], [0,3], [1,4], [2,4], [2,0]],
  ],

  "V": [
    [[0,0], [0,3], [1,4], [2,3], [2,0]],
  ],

  "W": [
    [[0,0], [0,4], [1,3], [2,4], [2,0]],
  ],

  "X": [
    [[0,0], [0,1], [1,2], [2,3], [2,4]],
    [[2,0], [2,1], [1,2], [0,3], [0,4]],
  ],

  "Y": [
    [[2,0], [2,4], [0,4]],
    [[0,0], [0,2], [2,2]],
  ],

  "Z": [
    [[0,0], [2,0], [2,1], [0,3], [0,4], [2,4]],
  ],

  "a": [
    [[0,4], [0,1], [2,1], [2,4]],
    [[0,3], [2,3]],
  ],

  "b": [
    [[0,1], [0,4], [2,4], [2,3], [1,2], [1,1], [0,1]],
  ],

  "c": [
    [[2,1], [0,1], [0,4], [2,4]],
  ],

  "d": [
    [[0,1], [0,4], [1,4], [2,3], [2,2], [1,1], [0,1]],
  ],

  "e": [
    [[2,1], [0,1], [0,2], [1,2], [0,2], [0,4], [2,4]],
  ],

  "f": [
    [[2,1], [0,1], [0,2], [1,2], [0,2], [0,4]],
  ],

  "g": [
    [[2,1], [0,1], [0,4], [2,4], [2,3]],
  ],

  "h": [
    [[0,1], [0,4]],
    [[2,1], [2,4]],
    [[0,3], [2,3]],
  ],

  "i": [
    [[0,1], [2,1]],
    [[0,4], [2,4]],
    [[1,1], [1,4]],
  ],

  "j": [
    [[0,1], [2,1]],
    [[0,4], [1,4], [1,1]],
  ],

  "k": [
    [[0,1], [0,4], [0,3], [2,1], [1,2], [2,3], [2,4]],
  ],

  "l": [
    [[0,1], [0,4], [2,4]],
  ],

  "m": [
    [[0,4], [0,1], [1,2], [2,1], [2,4]],
  ],

  "n": [
    [[0,4], [0,1], [1,1], [2,2], [2,4]],
  ],

  "o": [
    [[0,4], [1,4], [2,3], [2,1], [1,1], [0,2], [0,4]],
  ],

  "p": [
    [[0,4], [0,1], [2,1], [2,3], [0,3]],
  ],

  "q": [
    [[2,4], [1,4], [1,3], [0,3], [0,2], [1,1], [2,2], [1,3]],
  ],

  "r": [
    [[0,4], [0,1], [2,1], [2,2], [1,3], [2,4]],
  ],

  "s": [
    [[2,1], [1,1], [0,2], [2,3], [1,4], [0,4]],
  ],

  "t": [
    [[0,1], [2,1]],
    [[1,1], [1,4]],
  ],

  "u": [
    [[0,1], [0,3], [1,4], [2,4], [2,1]],
  ],

  "v": [
    [[0,1], [0,3], [1,4], [2,3], [2,1]],
  ],

  "w": [
    [[0,1], [0,4], [1,3], [2,4], [2,1]],
  ],

  "x": [
    [[0,1], [2,3], [2,4]],
    [[2,1], [0,3], [0,4]],
  ],

  "y": [
    [[2,1], [2,4], [0,4]],
    [[0,1], [0,2], [2,2]],
  ],

  "z": [
    [[0,1], [2,1], [2,2], [0,3], [0,4], [2,4]],
  ],
}

/*
export default ({
  children,
  color,
  x = 0,
  y = 0,
  scale = 1,
  strokeMultiplier = 1,
  borderColor = undefined,
  borderMultiplier = 0,
}) => {
  const g = (...paths) => (
    <Svg.G fill="none" strokeLinecap="square" strokeLinejoin="round">
      {(borderColor && borderMultiplier > 0) && (
        <Svg.G
          stroke={borderColor}
          strokeWidth={borderMultiplier}
        >{paths}</Svg.G>
      )}
      <Svg.G stroke={color} strokeWidth={scale * strokeMultiplier}>{paths}</Svg.G>
    </Svg.G>
  )

  let i = 0
  const path = (...points) => {
    return (
      <Svg.Path
        key={`letter-${i++}`}
        d={`M${points.map(p => [
          1 * (p[0] + x),
          1 * (p[1] + y),
        ]).join(" L")}`}
      />
    ],
  }

  switch (children) {
  }
}

*/